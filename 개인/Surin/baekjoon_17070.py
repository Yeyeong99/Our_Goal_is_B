"""
파이프 옮기기
- N x N
- 1부터 행, 열 번호 시작
- 파이프
    - 2개의 연속된 칸을 차지하는 크기
    - 밀고 회전 가능 : 가로 세로 대각선
        - 45도만 회전 가능
    - 밀어서 이동 가능
    - 항상 빈칸만 차지
- 파이프 첫 위치 : (1, 1), (1, 2)
- 빈칸 : 0, 벽 : 1
- 파이프의 한쪽 끝을 (N, N)로 이동시키는 방법의 개수
    - 이동 못하면 0
"""

N = int(input())
room = [list(map(int, input().split())) for _ in range(N)]

# dp[r][c][d]: (r, c)에 파이프 끝이 있고, 방향 d(0=가로, 1=세로, 2=대각선)일 때 경우의 수
dp = [[[0]*3 for _ in range(N)] for _ in range(N)]

# 초기 상태: (0, 1)에 가로 방향 파이프가 존재함
dp[0][1][0] = 1

for r in range(N):
    for c in range(2, N):  # (0,0), (0,1)은 이미 사용됨
        if room[r][c] == 1:
            continue  # 벽이면 파이프 못 놓음

        # ➡️ 가로 방향
        # 가로 또는 대각선에서 →로 이동
        dp[r][c][0] = dp[r][c-1][0] + dp[r][c-1][2]

        # ⬇️ 세로 방향 (r > 0일 때만 가능)
        if r > 0:
            dp[r][c][1] = dp[r-1][c][1] + dp[r-1][c][2]

        # ↘️ 대각선 (3칸 다 비어 있어야 함)
        if r > 0 and room[r-1][c] == 0 and room[r][c-1] == 0:
            dp[r][c][2] = (
                dp[r-1][c-1][0] + dp[r-1][c-1][1] + dp[r-1][c-1][2]
            )

# 최종 도착점에 오는 모든 방향의 경우의 수 합
print(sum(dp[N-1][N-1]))
